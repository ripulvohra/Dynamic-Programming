#include<bits/stdc++.h>
using namespace std;

int knapSack(int W, int wt[], int val[], int n)
{
   int i, w;
   int K[n+1][W+1];
 
   // Build table K[][] in bottom up manner
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (wt[i] <= w)
                 K[i][w] = max(val[i] + K[i-1][w-wt[i]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }
 
   return K[n][W];
}
 
int main()
{
    int n;
    cin>>n;
    int val[n]; 
    int wt[n]; 
    for(int i=1;i<=n;i++) cin>>val[i];
    for(int i=1;i<=n;i++) cin>>wt[i];
    int  W;
    cin>>W;
    
    cout<<knapSack(W, wt, val, n);
}

//http://www.geeksforgeeks.org/dynamic-programming-set-10-0-1-knapsack-problem/
//complexity o(no of items*Weight allowed)
